# Makefile.in generated by automake 1.9.6 from Makefile.am.
# tests/XSLTMark/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/libxslt
pkglibdir = $(libdir)/libxslt
pkgincludedir = $(includedir)/libxslt
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
subdir = tests/XSLTMark
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
SOURCES =
DIST_SOURCES =
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/missing --run autoconf
AUTOHEADER = ${SHELL} /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/missing --run autoheader
AUTOMAKE = ${SHELL} /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/missing --run automake-1.9
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
EXSLT_INCLUDEDIR = -I${includedir}
EXSLT_LIBDIR = -L${libdir}
EXSLT_LIBS = -lexslt -lxslt  -lxml2 -lm 
EXTRA_LIBS =   -lxml2 -lm
F77 = f77
FFLAGS = -g -O2
HTML_DIR = $(prefix)/doc
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBEXSLT_MAJOR_VERSION = 0
LIBEXSLT_MICRO_VERSION = 13
LIBEXSLT_MINOR_VERSION = 8
LIBEXSLT_VERSION = 0.8.13
LIBEXSLT_VERSION_EXTRA = 
LIBEXSLT_VERSION_INFO = 8:13:8
LIBEXSLT_VERSION_NUMBER = 813
LIBGCRYPT_CFLAGS = 
LIBGCRYPT_CONFIG = no
LIBGCRYPT_LIBS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBXML_CFLAGS =  -I/usr/include/libxml2
LIBXML_LIBS =  -lxml2
LIBXML_REQUIRED_VERSION = 2.6.27
LIBXML_SRC = 
LIBXSLT_DEFAULT_PLUGINS_PATH = /usr/lib/libxslt-plugins
LIBXSLT_MAJOR_MINOR_VERSION = 1.1
LIBXSLT_MAJOR_VERSION = 1
LIBXSLT_MICRO_VERSION = 21
LIBXSLT_MINOR_VERSION = 1
LIBXSLT_VERSION = 1.1.21
LIBXSLT_VERSION_EXTRA = 
LIBXSLT_VERSION_INFO = 2:21:1
LIBXSLT_VERSION_NUMBER = 10121
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/missing --run makeinfo
MV = /bin/mv
M_LIBS = -lm
OBJEXT = o
PACKAGE = libxslt
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = perl
PYTHON = /usr/bin/python
PYTHONSODV = 
PYTHON_INCLUDES = /usr/include/python2.7
PYTHON_SITE_PACKAGES = /usr/lib/python2.7/dist-packages
PYTHON_SUBDIR = python
PYTHON_VERSION = 2.7
RANLIB = ranlib
RELDATE = Tue Sep 20 2016
RM = /bin/rm
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STATIC_BINARIES = 
STRIP = strip
TAR = /bin/tar
VERSION = 1.1.21
WIN32_EXTRA_LDFLAGS = 
WIN32_EXTRA_LIBADD = 
WITH_CRYPTO = 0
WITH_DEBUGGER = 1
WITH_MEM_DEBUG = 0
WITH_MODULES = 1
WITH_MODULES_FALSE = #
WITH_MODULES_TRUE = 
WITH_PERL_FALSE = #
WITH_PERL_TRUE = 
WITH_PYTHON_FALSE = #
WITH_PYTHON_TRUE = 
WITH_TRIO = 0
WITH_XSLT_DEBUG = 1
XML_CONFIG = xml2-config
XSLTPROCDV = 
XSLT_INCLUDEDIR = -I${includedir}
XSLT_LIBDIR = -L${libdir}
XSLT_LIBS = -lxslt  -lxml2 -lm
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = f77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/anton/PROJECTS/DB_course/Lab1/task1/libxslt-1.1.21/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr
program_transform_name = s,x,x,
pythondir = $(libdir)/python$(PYTHON_VERSION)/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
EXTRA_DIST = \
  dbgen.pl \
  alphabetize.out alphabetize.ref alphabetize.xsl \
  attsets.out attsets.ref attsets.xsl \
  avts.out avts.ref avts.xsl \
  axis.out axis.ref axis.xml axis.xsl \
  backwards.out backwards.ref backwards.xsl \
  bottles.out bottles.ref bottles.xml bottles.xsl \
  breadth.out breadth.ref breadth.xml \
  brutal.out brutal.ref brutal.xml brutal.xsl \
  chart.out chart.ref chart.xml chart.xsl \
  creation.out creation.ref creation.xsl \
  current.out current.ref current.xml current.xsl \
  dbonerow.out dbonerow.ref dbonerow.xsl \
  dbtail.out dbtail.ref dbtail.xsl \
  decoy.out decoy.xsl \
  depth.out depth.ref depth.xml \
  encrypt.out encrypt.ref encrypt.xsl \
  find.xsl \
  functions.out functions.ref functions.xsl \
  game.out game.ref game.xml game.xsl \
  gettysburg.xml \
  html.out html.ref html.xml html.xsl \
  identity.out identity.ref identity.xml identity.xsl \
  inventory.out inventory.ref inventory.xml inventory.xsl \
  metric.out metric.ref metric.xml metric.xsl \
  number.out number.xml number.xsl \
  oddtemplate.out oddtemplate.ref oddtemplate.xml oddtemplate.xsl \
  patterns.out patterns.ref patterns.xsl \
  prettyprint.out prettyprint.ref prettyprint.xsl \
  priority.out priority.ref priority.xml priority.xsl \
  products.out products.ref products.xml products.xsl \
  queens.out queens.ref queens.xml queens.xsl \
  reverser.out reverser.ref reverser.xsl \
  stringsort.out stringsort.ref stringsort.xsl \
  summarize.out summarize.ref summarize.xsl \
  total.out total.ref total.xsl \
  tower.out tower.ref tower.xml tower.xsl tower2.xsl \
  trend.out trend.ref trend.xml trend.xsl \
  union.out union.ref union.xml union.xsl \
  xpath.out xpath.ref xpath.xml xpath.xsl \
  xslbench1.out xslbench1.xml xslbench1.xsl \
  xslbench2.out xslbench2.xsl \
  xslbench3.out xslbench3.xsl \
  xslbenchdream.xml

ALL_TESTS = alphabetize attsets avts axis backwards bottles breadth brutal chart \
  creation current dbonerow dbtail decoy depth encrypt functions game \
  html identity inventory metric number oddtemplate patterns prettyprint \
  priority products queens reverser stringsort summarize total tower trend \
  union xpath xslbench1 xslbench2 xslbench3

all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  tests/XSLTMark/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  tests/XSLTMark/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-libtool

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: all all-am check check-am clean clean-generic clean-libtool \
	distclean distclean-generic distclean-libtool distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am \
	uninstall-info-am

%.out : %

$(top_builddir)/xsltproc/xsltproc:
	@(cd ../../xsltproc ; $(MAKE) xsltproc)

all:

test tests:
	@echo '## Running XSLTMark tests'
	@for i in $(ALL_TESTS); do $(MAKE) $$i; done

valgrind:
	@echo '## Running the regression tests under Valgrind'
	$(MAKE) CHECKER='valgrind -q' tests

clean:
	rm -f *.tmp *~ core db100.xml db1000.xml db10000.xml

db100.xml: $(srcdir)/dbgen.pl
	$(PERL) $(srcdir)/dbgen.pl 100 > db100.xml

db1000.xml: $(srcdir)/dbgen.pl
	$(PERL) $(srcdir)/dbgen.pl 1000 > db1000.xml

db10000.xml: $(srcdir)/dbgen.pl
	$(PERL) $(srcdir)/dbgen.pl 10000 > db10000.xml

alphabetize:	db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

avts:			db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

creation:		db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

dbonerow:		db10000.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

dbtail:		db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

decoy:		db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

encrypt:		db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

functions:		db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

identity:		db1000.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

patterns:		db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

prettyprint:	db100.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

stringsort:		db1000.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

#alphabetize:
#avts:
#creation:
#dbonerow:
#dbtail:
#decoy:
#encrypt:
#functions:
#identity:
#patterns:
#prettyprint:
#stringsort:

attsets:		chart.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

axis:			axis.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

backwards:		game.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

bottles:		bottles.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

brutal:		brutal.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

chart:		chart.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

current:		current.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

game:			game.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

html:			html.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

inventory:		inventory.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

metric:		metric.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

number:		number.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

oddtemplate:	oddtemplate.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

priority:		priority.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

products:		products.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

queens:		queens.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

reverser:		gettysburg.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

summarize:		queens.xsl
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

total:		chart.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

tower:		tower.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

trend:		trend.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

union:		union.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xpath:		xpath.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xslbench1:		xslbench1.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xslbench2:		xslbenchdream.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xslbench3:		xslbenchdream.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

breadth:		
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/find.xsl $@.xml > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

depth:		
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/find.xsl $@.xml > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
